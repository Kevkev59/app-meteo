{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/service-meteo.service\";\nimport * as i2 from \"src/app/services/service-geolocalisation.service\";\nimport * as i3 from \"@angular/common\";\nfunction PrevisionsComponent_div_0_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 5)(1, \"td\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 6);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 6);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 6);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 6);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const prevision_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.time[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.weathercode[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.temperature[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.windspeed[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.winddirection[0]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(prevision_r2.temperature[0]);\n  }\n}\nfunction PrevisionsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 1);\n    i0.ɵɵtext(2, \"Pr\\u00E9visions m\\u00E9t\\u00E9o\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"table\", 2)(4, \"thead\")(5, \"tr\")(6, \"th\", 3);\n    i0.ɵɵtext(7, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 3);\n    i0.ɵɵtext(9, \"M\\u00E9t\\u00E9o\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 3);\n    i0.ɵɵtext(11, \"Temp\\u00E9rature\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 3);\n    i0.ɵɵtext(13, \"Vitesse du vent\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\", 3);\n    i0.ɵɵtext(15, \"Direction du vent\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"th\", 3);\n    i0.ɵɵtext(17, \"Humidit\\u00E9\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"tbody\");\n    i0.ɵɵtemplate(19, PrevisionsComponent_div_0_tr_19_Template, 13, 6, \"tr\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(19);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.previsions);\n  }\n}\nexport class PrevisionsComponent {\n  constructor(meteoService, localisationService) {\n    this.meteoService = meteoService;\n    this.localisationService = localisationService;\n    // Initialisation de la propriété currentPosition avec un objet vide du type GeolocationPosition.\n    this.currentPosition = {};\n    this.previsions = [];\n  }\n  ngOnInit() {\n    this.localisationService.getCurrentPosition();\n    this.localisationService.getCurrentPositionObservable().subscribe(position => {\n      this.currentPosition = position;\n      this.getPrevisionsMeteoWithLocation();\n    }, error => {\n      console.error('Error getting current position:', error);\n    });\n  }\n  // integration du paramètre de géolocalisation.\n  getPrevisionsMeteoWithLocation() {\n    const latitude = this.currentPosition.coords.latitude;\n    const longitude = this.currentPosition.coords.longitude;\n    //console.log('Latitude', latitude);\n    //console.log('Longitude', longitude);\n    this.meteoService.getPrevisionsMeteo(latitude, longitude).subscribe(data => {\n      const dailyData = [];\n      for (let i = 0; i < data.daily.time.length; i++) {\n        const daily = {\n          time: [data.daily.time[i]],\n          sunrise: [data.daily.sunrise[i]],\n          sunset: [data.daily.sunset[i]],\n          uv_index_max: [data.daily.uv_index_max[i]],\n          uv_index_clear_sky_max: [data.daily.uv_index_clear_sky_max[i]],\n          temperature: [data.current_weather.temperature],\n          windspeed: [data.current_weather.windspeed],\n          winddirection: [data.current_weather.winddirection],\n          weathercode: [data.current_weather.weathercode]\n        };\n        dailyData.push(daily);\n      }\n      this.previsions = dailyData;\n    }, error => {\n      console.error('Error getting weather forecast:', error);\n    });\n  }\n}\nPrevisionsComponent.ɵfac = function PrevisionsComponent_Factory(t) {\n  return new (t || PrevisionsComponent)(i0.ɵɵdirectiveInject(i1.ServiceMeteoService), i0.ɵɵdirectiveInject(i2.ServiceGeolocalisationService));\n};\nPrevisionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PrevisionsComponent,\n  selectors: [[\"app-previsions\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"text-2xl\", \"font-bold\", \"mb-4\"], [1, \"w-full\", \"border-collapse\"], [1, \"py-3\", \"px-6\", \"bg-gray-100\", \"text-gray-800\", \"border-b\"], [\"class\", \"bg-white border-b\", 4, \"ngFor\", \"ngForOf\"], [1, \"bg-white\", \"border-b\"], [1, \"py-4\", \"px-6\", \"border-b\"]],\n  template: function PrevisionsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PrevisionsComponent_div_0_Template, 20, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.previsions.length > 0);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcmV2aXNpb25zLmNvbXBvbmVudC5jc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wcmV2aXNpb25zL3ByZXZpc2lvbnMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esd0tBQXdLIiwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","PrevisionsComponent","constructor","meteoService","localisationService","ngOnInit","getCurrentPosition","getCurrentPositionObservable","subscribe","position","currentPosition","getPrevisionsMeteoWithLocation","error","console","latitude","coords","longitude","getPrevisionsMeteo","data","dailyData","i","daily","time","length","sunrise","sunset","uv_index_max","uv_index_clear_sky_max","temperature","current_weather","windspeed","winddirection","weathercode","push","previsions","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Apprenant\\Documents\\app-meteo\\src\\app\\components\\previsions\\previsions.component.html","C:\\Users\\Apprenant\\Documents\\app-meteo\\src\\app\\components\\previsions\\previsions.component.ts"],"sourcesContent":["<div *ngIf=\"previsions.length > 0\">\r\n  <h2 class=\"text-2xl font-bold mb-4\">Prévisions météo</h2>\r\n  <table class=\"w-full border-collapse\">\r\n    <thead>\r\n      <tr>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Date</th>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Météo</th>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Température</th>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Vitesse du vent</th>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Direction du vent</th>\r\n        <th class=\"py-3 px-6 bg-gray-100 text-gray-800 border-b\">Humidité</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let prevision of previsions\" class=\"bg-white border-b\">\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.time[0] }}</td>\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.weathercode[0] }}</td>\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.temperature[0] }}</td>\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.windspeed[0] }}</td>\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.winddirection[0] }}</td>\r\n        <td class=\"py-4 px-6 border-b\">{{ prevision.temperature[0] }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ServiceMeteoService } from '../../services/service-meteo.service';\r\nimport { ServiceGeolocalisationService } from 'src/app/services/service-geolocalisation.service';\r\nimport { Root, Daily } from '../../models/meteo';\r\n\r\n@Component({\r\n  selector: 'app-previsions',\r\n  templateUrl: './previsions.component.html',\r\n  styleUrls: ['./previsions.component.css']\r\n})\r\nexport class PrevisionsComponent implements OnInit {\r\n// Initialisation de la propriété currentPosition avec un objet vide du type GeolocationPosition.\r\n\r\n  currentPosition:GeolocationPosition = {} as GeolocationPosition;\r\n  previsions: Daily[] = [];\r\n\r\n  constructor(\r\n    private meteoService: ServiceMeteoService,\r\n    private localisationService: ServiceGeolocalisationService\r\n    ) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.localisationService.getCurrentPosition();\r\n    this.localisationService.getCurrentPositionObservable().subscribe(\r\n      (position: GeolocationPosition) => {\r\n        this.currentPosition=position;\r\n        this.getPrevisionsMeteoWithLocation();\r\n      },\r\n      (error: GeolocationPositionError) => {\r\n        console.error('Error getting current position:', error)\r\n      }\r\n    );\r\n  }\r\n\r\n// integration du paramètre de géolocalisation.\r\n\r\ngetPrevisionsMeteoWithLocation():void {\r\n  const latitude = this.currentPosition.coords.latitude;\r\n  const longitude = this.currentPosition.coords.longitude;\r\n  //console.log('Latitude', latitude);\r\n  //console.log('Longitude', longitude);\r\n\r\n    this.meteoService.getPrevisionsMeteo(latitude,longitude).subscribe((data: Root) => {\r\n      const dailyData: Daily[] = [];\r\n      for (let i = 0; i < data.daily.time.length; i++) {\r\n        const daily: Daily = {\r\n          time: [data.daily.time[i]],\r\n          sunrise: [data.daily.sunrise[i]],\r\n          sunset: [data.daily.sunset[i]],\r\n          uv_index_max: [data.daily.uv_index_max[i]],\r\n          uv_index_clear_sky_max: [data.daily.uv_index_clear_sky_max[i]],\r\n          temperature: [data.current_weather.temperature],\r\n          windspeed: [data.current_weather.windspeed],\r\n          winddirection:[data.current_weather.winddirection],\r\n          weathercode:[data.current_weather.weathercode]\r\n        };\r\n\r\n        dailyData.push(daily);\r\n      }\r\n      this.previsions = dailyData;\r\n    },\r\n    (error: any) => {\r\n      console.error('Error getting weather forecast:', error);\r\n    }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}